{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { getAuthData } from './storage';\nexport const getTokenData = () => {\n  try {\n    return jwtDecode(getAuthData().access_token);\n  } catch (error) {\n    return undefined;\n  }\n};\nexport const isAuthenticated = () => {\n  const tokenData = getTokenData();\n  return tokenData && tokenData.exp * 1000 > Date.now() ? true : false;\n};\nexport const hasAnyRoles = roles => {\n  if (roles.length === 0) {\n    return true;\n  }\n\n  const tokenData = getTokenData();\n\n  if (tokenData !== undefined) {\n    return roles.some(role => tokenData.authorities.includes(role));\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/home/denilso/desenv/cursos/devsuperior/movie-flix-frontend/src/util/auth.ts"],"names":["jwtDecode","getAuthData","getTokenData","access_token","error","undefined","isAuthenticated","tokenData","exp","Date","now","hasAnyRoles","roles","length","some","role","authorities","includes"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,WAA5B;AAWA,OAAO,MAAMC,YAAY,GAAG,MAA8B;AAEtD,MAAI;AACF,WAAOF,SAAS,CAACC,WAAW,GAAGE,YAAf,CAAhB;AACD,GAFD,CAGA,OAAMC,KAAN,EAAa;AACX,WAAOC,SAAP;AACD;AAEF,CATI;AAWL,OAAO,MAAMC,eAAe,GAAG,MAAgB;AAC7C,QAAMC,SAAS,GAAGL,YAAY,EAA9B;AACA,SAAQK,SAAS,IAAIA,SAAS,CAACC,GAAV,GAAgB,IAAhB,GAAuBC,IAAI,CAACC,GAAL,EAArC,GAAmD,IAAnD,GAA0D,KAAjE;AACD,CAHM;AAKT,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA6B;AAEpD,MAAKA,KAAK,CAACC,MAAN,KAAiB,CAAtB,EAA0B;AACxB,WAAO,IAAP;AACD;;AAED,QAAMN,SAAS,GAAGL,YAAY,EAA9B;;AAEA,MAAKK,SAAS,KAAKF,SAAnB,EAA+B;AAC7B,WAAOO,KAAK,CAACE,IAAN,CAAWC,IAAI,IAAIR,SAAS,CAACS,WAAV,CAAsBC,QAAtB,CAA+BF,IAA/B,CAAnB,CAAP;AACD;;AAGD,SAAO,KAAP;AACD,CAdI","sourcesContent":["import jwtDecode from 'jwt-decode'\nimport { getAuthData } from './storage';\n\nexport type Role = 'ROLE_MEMBER' | 'ROLE_ADMIN';\n\nexport type TokenData = {\n  exp: number;\n  user_name: string;\n  authorities: string;\n}\n\n\nexport const getTokenData = () : TokenData | undefined => {\n\n    try {\n      return jwtDecode(getAuthData().access_token) as TokenData;\n    }\n    catch(error) {\n      return undefined;\n    }\n    \n  }\n  \n  export const isAuthenticated = () : boolean => {\n    const tokenData = getTokenData();\n    return (tokenData && tokenData.exp * 1000 > Date.now()) ? true : false ;\n  }\n\nexport const hasAnyRoles = (roles: Role[]) : boolean => {\n\n    if ( roles.length === 0 ) {\n      return true;\n    }\n  \n    const tokenData = getTokenData();\n  \n    if ( tokenData !== undefined ) {\n      return roles.some(role => tokenData.authorities.includes(role));\n    }\n  \n  \n    return false;\n  }"]},"metadata":{},"sourceType":"module"}